this.android=this.android||{},this.android.widget=this.android.widget||{},this.android.widget.coordinator=function(){"use strict";const{constant:e,enumeration:t,util:o}=android.lib,i=android.base.Resource,n=squared.lib.session,s=squared.base.lib.enumeration;class d extends squared.base.ExtensionUI{processNode(r,a){const c=this.application.extensionManager,l=o.createViewAttribute(this.options[r.elementId]);i.formatOptions(l,c.optionValueAsBoolean(e.EXT_ANDROID.RESOURCE_STRINGS,"numberResourceValue"));const u=d.findNestedElement(r.element,"android.widget.toolbar");if(u){const e=n.getElementAsNode(u,r.sessionId);if(e){const t=c.retrieve("android.widget.toolbar");if(t){const o=e.elementId;t.options[o]&&"collapsingToolbar"in t.options[o]&&r.android("fitsSystemWindows","true")}}}const O=r.localSettings.targetAPI<29?e.SUPPORT_ANDROID.COORDINATOR:e.SUPPORT_ANDROID_X.COORDINATOR;return r.setControlType(O,t.CONTAINER_NODE.BLOCK),r.exclude(s.NODE_RESOURCE.ASSET),r.renderExclude=!1,r.render(a),{output:{type:1,node:r,controlName:O}}}postOptimize(e){if(e.documentRoot){if(e.inlineWidth)for(const t of e)if(t.rightAligned){e.setLayoutWidth("match_parent",!0);break}if(e.inlineHeight)for(const t of e)if(t.bottomAligned){e.setLayoutHeight("match_parent",!0);break}}}}const r=new d("android.widget.coordinator",2);return squared&&squared.includeAsync(r),r}();
