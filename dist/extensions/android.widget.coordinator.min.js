this.android=this.android||{},this.android.widget=this.android.widget||{},this.android.widget.coordinator=function(){"use strict";const{getElementAsNode:e}=squared.lib.session,{NODE_RESOURCE:t}=squared.base.lib.enumeration,o=android.lib,{EXT_ANDROID:i,SUPPORT_ANDROID:n,SUPPORT_ANDROID_X:s}=o.constant,{CONTAINER_NODE:d}=o.enumeration,{createViewAttribute:r}=o.util,{Resource:a}=android.base;class c extends squared.base.ExtensionUI{processNode(o,l){const u=this.application.extensionManager,O=r(this.options[o.elementId]);a.formatOptions(O,u.optionValueAsBoolean(i.RESOURCE_STRINGS,"numberResourceValue"));const R=c.findNestedElement(o.element,"android.widget.toolbar");if(R){const t=e(R,o.sessionId);if(t){const e=u.retrieve("android.widget.toolbar");if(e){const i=e.options[t.elementId];i&&"collapsingToolbar"in i&&o.android("fitsSystemWindows","true")}}}const f=o.localSettings.targetAPI<29?n.COORDINATOR:s.COORDINATOR;return o.setControlType(f,d.BLOCK),o.exclude(t.ASSET),o.renderExclude=!1,o.render(l),{output:{type:1,node:o,controlName:f}}}postOptimize(e){if(e.documentRoot){if(e.inlineWidth)for(const t of e)if(t.rightAligned){e.setLayoutWidth("match_parent",!0);break}if(e.inlineHeight)for(const t of e)if(t.bottomAligned){e.setLayoutHeight("match_parent",!0);break}}}}const l=new c("android.widget.coordinator",2);return squared&&squared.includeAsync(l),l}();
